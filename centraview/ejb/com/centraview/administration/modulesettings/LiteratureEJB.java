/*
 * $RCSfile: LiteratureEJB.java,v $    $Revision: 1.1.1.1 $  $Date: 2005/04/28 20:21:47 $ - $Author: mking_cv $
 * 
 * The contents of this file are subject to the Open Software License
 * Version 2.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.centraview.com/opensource/license.html
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is: CentraView Open Source. 
 * 
 * The developer of the Original Code is CentraView.  Portions of the
 * Original Code created by CentraView are Copyright (c) 2004 CentraView,
 * LLC; All Rights Reserved.  The terms "CentraView" and the CentraView
 * logos are trademarks and service marks of CentraView, LLC.
 */

	/**
	 *
	 * @author praveen
	 * @version  1.0    
	 * Date : 31 st Dec 2003
	 * 
	 */
	
	package com.centraview.administration.modulesettings;
	
	import java.util.Collection;
import java.util.HashMap;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import com.centraview.common.CVDal;
	
	/**
	 * This is the EJB class for Literature
	 * The Logic for methods defined in Remote interface 
	 * is defined in this class
	 *
	 */
	
	public class LiteratureEJB implements SessionBean
	{
		protected SessionContext ctx;
		private String dataSource = "MySqlDS";
		public void setSessionContext(SessionContext ctx)
		{
			this.ctx=ctx;
		}
	
		/**
		 * 
		 *
		 */
		public void ejbCreate()
		{
		}
	
		/**
		 *
		 *
		 */
		public void ejbRemove()
		{
		}
	
		/**
		 *
		 *
		 */
		public void ejbActivate()
		{
		}
	
		/**
		 *
		 *
		 */
		public void ejbPassivate()
		{
		}
		
		
	
		/**
		 * Adds a new Literature
		 *
		 * @param userId The owner who inserts this record  
		 * @param LiteratureID the Literature    
		 * @param Title title of the Literature
		 * @param FielId Respective file that stored in DB
		 * 
		 * @exception   LiteratureException  
		 */
	    public int addLiterature(int userId,String title, int fileID, String description)throws LiteratureException
	    {
	    	int literatureID = 0;
		    try 
		    {
		    	
		    	CVDal cvdl = new CVDal(dataSource);
			
				cvdl.setSql("literature.addliterature");	
				cvdl.setString(1,title);
				cvdl.setInt(2,fileID);
				cvdl.setString(3,description);				
				cvdl.executeUpdate();	
				literatureID = cvdl.getAutoGeneratedKey();
				cvdl.clearParameters();
		    	cvdl.destroy();
		    	cvdl = null;
		    		
		    	return literatureID; 	
		    } catch(Exception e) 
		    {
		    	e.printStackTrace();
		    	throw new LiteratureException(LiteratureException.INSERT_FAILED,"Failed in LiteratureEJB while inserting Literature");
		    }
				
	    }
		
		public void deleteLiterature(int userID,int literatureID) throws LiteratureException
		{
			try
			{
				CVDal cvdl=new CVDal(dataSource);
				
				//deletes Literature
				cvdl.setSql("literature.deleteliterature");
				cvdl.setInt(1,literatureID);
				cvdl.executeUpdate();
				cvdl.clearParameters();
				cvdl.destroy();

			}
			catch(Exception e)
			{
				System.out.println("Error  in delete Literature method " +e);
				e.printStackTrace();
			}
		}
	    		
	    //Edit Literature
	    
		public LiteratureVO selectLiterature(int literatureID) throws LiteratureException
		{
			LiteratureVO literatureVO =null;
			try
			{

				CVDal cvdl=new CVDal(dataSource);
	
				//Select the Literature
				cvdl.setSql("literature.selectliterature");
				cvdl.setInt(1,literatureID);
				System.out.println("literatureID  ============="+literatureID);
				// Get the all informattion relted to the Literature 
				
				Collection col = cvdl.executeQuery();
				System.out.println("cOLLECTION ===="+col);	
			
				HashMap hm = (HashMap)col.iterator().next();
				
				
				if (hm!=null) 
				{
					
					literatureVO = new LiteratureVO();
					literatureVO.setLiteratureID(literatureID);
					literatureVO.setLiteratureTitle((String)hm.get("Title"));
					System.out.println("Literature Title ====="+literatureVO.getLiteratureTitle());
					literatureVO.setFileID(((Long)hm.get("FileID")).intValue());
					literatureVO.setFileName((String)hm.get("FileName"));

				}				
				
				cvdl.clearParameters();
				cvdl.destroy();

			}
			catch(Exception e)
			{
				System.out.println("Error  in delete Literature method " +e);
				e.printStackTrace();
			}
			
			return literatureVO ; 
		}

		 // Update the values in the database	
		 public void updateLiterature(int userid, String title, int fileID,int literatureID)throws LiteratureException {
			try 
			{
	
				CVDal cvdl = new CVDal(dataSource);

				if(fileID == 0){
					cvdl.setSql("literature.updateliteraturetitle");
					cvdl.setString(1,title);
					cvdl.setInt(2,literatureID);
					
				}
				else {
					cvdl.setSql("literature.updateliterature");
					cvdl.setString(1,title);
					System.out.println("FILE ID ===== "+fileID);
					cvdl.setInt(2,fileID);
					cvdl.setInt(3,literatureID);
				}
		
				cvdl.executeUpdate();	
				cvdl.clearParameters();

				cvdl.destroy();
				cvdl = null;
	
			} catch(Exception e) 
			{
				e.printStackTrace();
				throw new LiteratureException(LiteratureException.INSERT_FAILED,"Failed in LiteratureEJB while Updating Literature");
			}

		 	
		 		    		
		 }
	    /**
		 * @author Kevin McAllister <kevin@centraview.com>
		 * This simply sets the target datasource to be used for DB interaction
		 * @param ds A string that contains the cannonical JNDI name of the datasource
		 */
		 public void setDataSource(String ds) {
		 	this.dataSource = ds;
		 }
}
