/*
 * $RCSfile: TicketEJB.java,v $    $Revision: 1.6 $  $Date: 2005/10/17 17:11:43 $ - $Author: mcallist $
 * 
 * The contents of this file are subject to the Open Software License
 * Version 2.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.centraview.com/opensource/license.html
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is: CentraView Open Source. 
 * 
 * The developer of the Original Code is CentraView.  Portions of the
 * Original Code created by CentraView are Copyright (c) 2004 CentraView,
 * LLC; All Rights Reserved.  The terms "CentraView" and the CentraView
 * logos are trademarks and service marks of CentraView, LLC.
 */

package com.centraview.support.ticket;

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.InitialContext;

import org.apache.log4j.Logger;

import com.centraview.administration.authorization.AuthorizationLocal;
import com.centraview.administration.authorization.AuthorizationLocalHome;
import com.centraview.administration.authorization.ModuleFieldRightMatrix;
import com.centraview.common.AuthorizationFailedException;
import com.centraview.common.CVDal;
import com.centraview.common.CVUtility;
import com.centraview.common.Constants;
import com.centraview.common.DateUtility;
import com.centraview.contact.entity.EntityLocal;
import com.centraview.contact.entity.EntityLocalHome;
import com.centraview.contact.entity.EntityPK;
import com.centraview.contact.helper.ContactHelperLocal;
import com.centraview.contact.helper.ContactHelperLocalHome;
import com.centraview.contact.helper.CustomFieldVO;
import com.centraview.customfield.CustomFieldLocal;
import com.centraview.customfield.CustomFieldLocalHome;
import com.centraview.cvattic.CvAtticLocal;
import com.centraview.cvattic.CvAtticLocalHome;

public class TicketEJB implements SessionBean {
  private static Logger logger = Logger.getLogger(TicketEJB.class);
  protected SessionContext ctx;
  private String dataSource = "MySqlDS";

  public void setSessionContext(SessionContext ctx)
  {
    this.ctx = ctx;
  }

  public void ejbCreate()
  {}

  public void ejbRemove()
  {}

  public void ejbActivate()
  {}

  public void ejbPassivate()
  {}

  /**
   * Adds a new tivket
   * @param userId
   * @param tvo TicketVO
   * @exception TicketException
   */
  public int addTicket(int userId, TicketVO tvo) throws TicketException, AuthorizationFailedException
  {
    CVDal cvdl = null;
    int ticketId = 0;

    if (!CVUtility.isModuleVisible("Ticket", userId, this.dataSource))
      throw new AuthorizationFailedException("Ticket - addTicket");

    try {

      if (tvo == null)
        throw new TicketException(1, "Cannot add Ticket. TicketVo is empty.");

      if (tvo.getTitle() == null || tvo.getTitle().length() == 0)
        throw new TicketException(1, "Title is Empty");

      if (tvo.getPriorityId() == 0)
        tvo.setPriorityId(1);

      if (tvo.getStatusId() == 0)
        tvo.setStatusId(1);

      if (tvo.getCreatedBy() == 0)
        tvo.setCreatedBy(userId);

      if (tvo.getOwner() == 0)
        tvo.setOwner(userId);

      cvdl = new CVDal(dataSource);
      cvdl.setSql("support.ticket.insertticket");

      cvdl.setString(1, tvo.getTitle());
      cvdl.setString(2, tvo.getDetail());
      cvdl.setInt(3, tvo.getStatusId());
      cvdl.setInt(4, tvo.getPriorityId());
      cvdl.setInt(5, tvo.getRefEntityId());
      cvdl.setInt(6, tvo.getRefIndividualId());
      cvdl.setInt(7, tvo.getManagerId());
      cvdl.setInt(8, tvo.getAssignedToId());
      cvdl.setInt(9, tvo.getOwner());
      cvdl.setInt(10, tvo.getCreatedBy());

      cvdl.executeUpdate();
      ticketId = cvdl.getAutoGeneratedKey();

      Vector thvec = tvo.getThreadVO();
      if (thvec != null) {
        Iterator it = thvec.iterator();
        while (it.hasNext()) {
          ThreadVO thvo = (ThreadVO) it.next();
          addThreadData(userId, ticketId, thvo, cvdl);
        }
      }
      // Save CustomFields
      Vector custfieldVec = tvo.getCustomField();
      InitialContext ic = CVUtility.getInitialContext();
      if (custfieldVec != null) {

        CustomFieldLocalHome custHome = (CustomFieldLocalHome) ic.lookup("local/CustomField");
        CustomFieldLocal custRemote = custHome.create();
        custRemote.setDataSource(this.dataSource);
        for (int i = 0; i < custfieldVec.size(); i++) {
          CustomFieldVO custFieldVO = (CustomFieldVO) custfieldVec.get(i);
          custFieldVO.setRecordID(ticketId);
          custRemote.addCustomField(custFieldVO);
        }
      }

      AuthorizationLocalHome authorizationHome = (AuthorizationLocalHome) ic.lookup("local/Authorization");
      AuthorizationLocal authorizationLocal = authorizationHome.create();
      authorizationLocal.setDataSource(dataSource);
      authorizationLocal.saveCurrentDefaultPermission("Ticket", ticketId, userId);

      return ticketId;
    } catch (Exception e) {
      logger.error("[addTicket]: Exception", e);
      throw new TicketException(1, "Failed in note ejb while adding Ticket");
    } finally {
      cvdl.clearParameters();
      cvdl.destroy();
      cvdl = null;
    }
  }

  /**
   * This method gets the details of the ticket without the thread details
   * @param userId
   * @param ticketId
   * @return
   * @exception TicketException
   */
  public TicketVO getTicketBasic(int userId, int ticketId) throws TicketException
  {
    CVDal cvdl = new CVDal(dataSource);
    try {
      TicketVO tvo = getTicketData(userId, ticketId, cvdl);
      if (tvo == null) {
        return null;
      }
      return tvo;
    } catch (Exception e) {
      logger.error("[getTicketBasic]: Exception", e);
      throw new TicketException(1, "Could not find Ticket");
    } finally {
      cvdl.destroy();
    }
  }

  /**
   * This method gets the details of the ticket without the thread details but
   * with all other relations like entity, individual, manager, assigned to
   * @param userId
   * @param ticketId
   * @return
   * @exception TicketException
   */
  public TicketVO getTicketBasicRelations(int userId, int ticketId) throws TicketException, AuthorizationFailedException
  {
    if (!CVUtility.canPerformRecordOperation(userId, "Ticket", ticketId, ModuleFieldRightMatrix.VIEW_RIGHT, this.dataSource))
      throw new AuthorizationFailedException("Ticket - getTicketBasicRelations");
    try {

      TicketVO tvo = null;
      CVDal cvdl = null;
      try {
        cvdl = new CVDal(dataSource);
        tvo = getTicketData(userId, ticketId, cvdl);
      } finally {
        cvdl.clearParameters();
        cvdl.destroy();
        cvdl = null;
      }

      if (tvo == null)
        return null;

      tvo.fillAuditDetails(this.dataSource);

      InitialContext ic = CVUtility.getInitialContext();
      ContactHelperLocalHome contactHome = (ContactHelperLocalHome) ic.lookup("local/ContactHelper");
      ContactHelperLocal contactRemote = contactHome.create();
      contactRemote.setDataSource(this.dataSource);

      try {
        String managerName = contactRemote.getIndividualName(tvo.getManagerId());
        tvo.setManagerName(managerName);
      } catch (Exception e) {}

      try {
        String assignedToName = contactRemote.getIndividualName(tvo.getAssignedToId());
        tvo.setAssignedToName(assignedToName);
      } catch (Exception e) {}

      try {
        String refIndividualName = contactRemote.getIndividualName(tvo.getRefIndividualId());
        tvo.setRefIndividualName(refIndividualName);

      } catch (Exception e) {
        logger.error("[getTicketBasicRelations]: Exception", e);
      }

      try {
        EntityLocalHome ehome = (EntityLocalHome) ic.lookup("local/Entity");
        EntityLocal eremote;
        eremote = ehome.findByPrimaryKey(new EntityPK(tvo.getRefEntityId(), this.dataSource));
        tvo.setEntityVO(eremote.getEntityVOWithBasicReferences());
      } catch (Exception e) {}

      return tvo;

    } catch (Exception e) {
      logger.error("[getTicketBasicRelations]: Exception", e);
      throw new TicketException(1, "Could not find Ticket");
    }

  }

  /**
   * This method gets the details of the ticket with the thread details
   * @param userId
   * @param ticketId
   * @return
   * @exception TicketException
   */
  // public TicketVO getTicketFull(int userId, int ticketId) throws
  // TicketException
  {
    // not needed in current release, cause no such view
  }

  /**
   * updated a ticket using TicketVO
   * @param userId
   * @param tvo
   * @exception TicketException
   */
  public void updateTicket(int userId, TicketVO tvo) throws TicketException, AuthorizationFailedException
  {
    CVDal cvdl = null;

    if (!CVUtility.canPerformRecordOperation(userId, "Ticket", tvo.getId(), ModuleFieldRightMatrix.UPDATE_RIGHT, this.dataSource))
      throw new AuthorizationFailedException("Ticket - updateTicket");

    try {

      if (tvo == null)
        throw new TicketException(1, "Could not update as vo is null");

      if (tvo.getId() <= 0)
        throw new TicketException(1, "Could not update as Id is not provided");

      if (tvo.getPriorityId() == 0)
        tvo.setPriorityId(1);

      if (tvo.getStatusId() == 0)
        tvo.setStatusId(1);

      if (tvo.getModifiedBy() == 0)
        tvo.setModifiedBy(userId);

      if (tvo.getOwner() == 0)
        tvo.setOwner(userId);

      int ticketId = tvo.getId();

      cvdl = new CVDal(dataSource);
      cvdl.setSql("support.ticket.updateticket");

      // begin :: adding for fieldlevel rights...
      TicketDBVO tdbvo = new TicketDBVO();
      tdbvo = getDBVO(userId, tvo.getId());
      tvo = (TicketVO) CVUtility.replaceVO(tdbvo, tvo, "Ticket", userId, this.dataSource);
      // end :: adding for fieldlevel rights...

      cvdl.setString(1, tvo.getTitle());
      cvdl.setString(2, tvo.getDetail());
      cvdl.setInt(3, tvo.getStatusId());
      cvdl.setInt(4, tvo.getPriorityId());
      cvdl.setInt(5, tvo.getRefEntityId());
      cvdl.setInt(6, tvo.getRefIndividualId());
      cvdl.setInt(7, tvo.getManagerId());
      cvdl.setInt(8, tvo.getAssignedToId());
      cvdl.setInt(9, userId);
      cvdl.setInt(10, ticketId);
      cvdl.executeUpdate();
      cvdl.destroy();
      cvdl = null;

      // Save CustomFields
      Vector custfieldVec = tvo.getCustomField();
      InitialContext ic = CVUtility.getInitialContext();
      CustomFieldLocalHome custHome = (CustomFieldLocalHome) ic.lookup("local/CustomField");
      CustomFieldLocal custRemote = custHome.create();
      custRemote.setDataSource(this.dataSource);
      for (int i = 0; i < custfieldVec.size(); i++) {
        CustomFieldVO custFieldVO = (CustomFieldVO) custfieldVec.get(i);
        custFieldVO.setRecordID(ticketId);
        custRemote.updateCustomField(custFieldVO);
      }
    } catch (Exception e) {
      logger.error("[updateTicket]: Exception", e);
      throw new TicketException(1, "Failed in ticket ejb while updating Ticket");
    } finally {
      if (cvdl != null) {
        cvdl.destroy();
        cvdl = null;
      }
    }

  }

  private TicketDBVO getDBVO(int userId, int ticketId) throws TicketException
  {
    CVDal cvdl = new CVDal(dataSource);
    TicketDBVO tdbvo = null;
    try {
      tdbvo = getTicketDBData(userId, ticketId, cvdl);
      if (tdbvo == null) {
        return null;
      }
      tdbvo.fillAuditDetails(this.dataSource);
      InitialContext ic = CVUtility.getInitialContext();
      ContactHelperLocalHome contactHome = (ContactHelperLocalHome) ic.lookup("local/ContactHelper");
      ContactHelperLocal contactRemote = contactHome.create();
      contactRemote.setDataSource(this.dataSource);
      try {
        String managerName = contactRemote.getIndividualName(tdbvo.getManagerId());
        tdbvo.setManagerName(managerName);
      } catch (Exception e) {
        logger.info("[getDBVO]: error getting Ticket Manager.");
      }
      try {
        String assignedToName = contactRemote.getIndividualName(tdbvo.getAssignedToId());
        tdbvo.setAssignedToName(assignedToName);
      } catch (Exception e) {
        logger.info("[getDBVO]: error getting Assigned user.");
      }

      try {
        String refIndividualName = contactRemote.getIndividualName(tdbvo.getRefIndividualId());
        tdbvo.setRefIndividualName(refIndividualName);
      } catch (Exception e) {
        logger.info("[getDBVO]: error getting Ticket Reference Individual");
      }
      try {
        EntityLocalHome ehome = (EntityLocalHome) ic.lookup("local/Entity");
        EntityLocal eremote;
        eremote = ehome.findByPrimaryKey(new EntityPK(tdbvo.getRefEntityId(), this.dataSource));
        tdbvo.setEntityVO(eremote.getEntityVOWithBasicReferences());
      } catch (Exception e) {
        logger.info("[getDBVO]: error getting Ticket Entity Reference");
      }
    } catch (Exception e) {
      logger.error("[getDBVO]: Exception", e);
      throw new TicketException(2, "Could not find Ticket");
    } finally {
      cvdl.destroy();
    }
    return tdbvo;
  }

  /**
   * This method deletes the Ticket with all threads and other links
   * @param individualID The <strong>individualID</strong> of the user deleting
   *          this ticket.
   * @param ticketID The ID of the ticket to be deleted.
   * @return void
   */
  public void deleteTicket(int individualID, int ticketID) throws AuthorizationFailedException
  {
    if (!CVUtility.canPerformRecordOperation(individualID, "Ticket", ticketID, ModuleFieldRightMatrix.DELETE_RIGHT, this.dataSource)) {
      throw new AuthorizationFailedException("User does not have privilege to delete this Ticket.");
    }

    CVDal cvdal = new CVDal(dataSource);
    InitialContext ic = CVUtility.getInitialContext();

    try {
      // here we are putting ticket into garbage
      TicketVO ticketVO = this.getTicketBasic(individualID, ticketID);

      HashMap hmDetails = new HashMap();
      hmDetails.put("title", ticketVO.getTitle());
      hmDetails.put("owner", new Integer(ticketVO.getRefIndividualId()));
      hmDetails.put("module", new Integer(10));
      hmDetails.put("recordtype", new Integer(52));

      CvAtticLocalHome atticHome = (CvAtticLocalHome) ic.lookup("local/CvAttic");
      CvAtticLocal atticRemote = atticHome.create();
      atticRemote.setDataSource(this.dataSource);

      int transactionID = atticRemote.getAtticTransactionID(individualID, Constants.CV_GARBAGE, hmDetails);

      HashMap primaryMembers = new HashMap();
      primaryMembers.put("TicketID", String.valueOf(ticketVO.getId()));
      atticRemote.dumpData(individualID, transactionID, "ticket", primaryMembers);
    } catch (Exception e) {
      logger.error("[deleteTicket]: Exception", e);
    }

    cvdal.clearParameters();
    cvdal.setSql("support.ticket.deletethread"); // deletes all threads of this
                                                  // ticket
    cvdal.setInt(1, ticketID);
    cvdal.executeUpdate();

    cvdal.clearParameters();
    cvdal.setSql("support.ticket.deleteticket"); // deletes tickets from ticket
    cvdal.setInt(1, ticketID);
    cvdal.executeUpdate();
    cvdal.destroy();

    try {
      AuthorizationLocalHome authHome = (AuthorizationLocalHome) ic.lookup("local/Authorization");
      AuthorizationLocal authRemote = authHome.create();
      authRemote.setDataSource(dataSource);
      authRemote.deleteRecordFromPublic("Ticket", ticketID);
      authRemote.deleteRecordsFromRecordAuthorization("Ticket", ticketID);
    } catch (Exception e) {
      logger.error("[deleteTicket]: Exception", e);
    }
  } // end deleteTicket() method

  /**
   * Adds a new Thread
   * @param userId
   * @param thvo ThreadVO
   * @exception TicketException
   * @return thread ID
   */
  public int addThread(int individualId, ThreadVO thvo) throws TicketException
  {

    CVDal cvdl = new CVDal(dataSource);
    try {
      if (thvo != null) {
        return addThreadData(individualId, thvo.getTicketId(), thvo, cvdl);
      }
      throw new TicketException(1, "Could not add thread. Threadvo is empty");
    } finally {
      cvdl.destroy();
    }
  }

  /**
   * updated a Thread using ThreadVO
   * @param userId
   * @param thvo
   * @exception TicketException
   */
  public void updateThread(int userId, ThreadVO thvo) throws TicketException
  {
    if (thvo == null) {
      throw new TicketException(1, "Could not update as vo is null");
    }
    if (thvo.getId() <= 0) {
      throw new TicketException(1, "Could not update as Id is not provided");
    }
    if (thvo.getPriorityId() == 0) {
      thvo.setPriorityId(1);
    }
    CVDal cvdl = new CVDal(dataSource);
    try {
      cvdl.setSql("support.ticket.updatethread");
      cvdl.setString(1, thvo.getTitle());
      cvdl.setString(2, thvo.getDetail());
      cvdl.setInt(3, thvo.getPriorityId());
      cvdl.setString(4, thvo.getThreadType());
      cvdl.setInt(5, thvo.getId());
      cvdl.executeUpdate();
    } finally {
      cvdl.destroy();
    }
  }

  /**
   * returns the Threads detail
   * @param userId
   * @param thread id
   * @exception TicketException
   * @returns ThreadVO
   */
  public ThreadVO getThread(int userId, int threadId)
  {
    ThreadVO thvo = null;
    CVDal cvdl = new CVDal(dataSource);
    try {
      cvdl.setSql("support.ticket.getthread");
      cvdl.setInt(1, threadId);
      Collection col = cvdl.executeQuery();
      cvdl = null;
      Iterator it = col.iterator();
      if (it.hasNext()) {
        HashMap hm = (HashMap) it.next();
        thvo = new ThreadVO();
        thvo.setId(((Long) hm.get("threadid")).intValue());
        thvo.setTicketId(((Long) hm.get("ticketid")).intValue());
        thvo.setTitle((String) hm.get("title"));
        thvo.setDetail((String) hm.get("detail"));
        thvo.setThreadType((String) hm.get("type"));
        thvo.setPriorityId(((Long) hm.get("priority")).intValue());
        thvo.setPriorityName((String) hm.get("priorityname"));
        thvo.setCreatedBy(((Long) hm.get("creator")).intValue());
        thvo.setCreatedOn((Timestamp) hm.get("created"));
        thvo.fillAuditDetails(this.dataSource);
      }
    } catch (Exception e) {
      logger.error("[getThread]: Exception", e);
    } finally {
      if (cvdl != null) {
        cvdl.destroy();
      }
    }
    return thvo;
  }

  /**
   * returns the Threads details for a ticket
   * @param userId
   * @param thread id
   * @exception TicketException
   * @returns Vector of ThreadVO
   */
  public Vector getAllThreadForTicket(int userId, int ticketId)
  {
    Vector thvec = new Vector();
    CVDal cvdl = new CVDal(dataSource);
    try {
      cvdl.setSql("support.ticket.getthreadforticket");
      cvdl.setInt(1, ticketId);
      Collection col = cvdl.executeQuery();
      Iterator it = col.iterator();
      while (it.hasNext()) {
        HashMap hm = (HashMap) it.next();
        ThreadVO thvo = new ThreadVO();
        thvo.setId(((Long) hm.get("threadid")).intValue());
        thvo.setTicketId(((Long) hm.get("ticketid")).intValue());
        thvo.setTitle((String) hm.get("title"));
        thvo.setDetail((String) hm.get("detail"));
        thvo.setThreadType((String) hm.get("type"));
        thvo.setPriorityId(((Long) hm.get("priority")).intValue());
        thvo.setPriorityName((String) hm.get("priorityname"));
        thvo.setCreatedBy(((Long) hm.get("creator")).intValue());
        thvo.setCreatedOn((Timestamp) hm.get("created"));
        thvo.fillAuditDetails(this.dataSource);
        thvec.add(thvo);
      }
    } finally {
      cvdl.destroy();
    }
    return thvec;
  }

  /**
   * duplicate a ticket using TicketVO
   * @param userId
   * @param tvo
   * @exception TicketException
   */
  public int duplicateTicket(int userId, TicketVO tvo) throws TicketException
  {
    CVDal cvdl = null;
    int ticketId = -1;
    try {

      if (tvo == null)
        throw new TicketException(1, "Could not create as vo is null");

      if (tvo.getId() <= 0)
        throw new TicketException(1, "Could not create as Id is not provided");

      if (tvo.getPriorityId() == 0)
        tvo.setPriorityId(1);

      if (tvo.getStatusId() == 0)
        tvo.setStatusId(1);

      if (tvo.getModifiedBy() == 0)
        tvo.setModifiedBy(userId);

      if (tvo.getOwner() == 0)
        tvo.setOwner(userId);

      // int ticketId = tvo.getId();

      cvdl = new CVDal(dataSource);
      cvdl.setSql("support.ticket.insertticket");

      cvdl.setSql("support.ticket.insertticket");

      cvdl.setString(1, tvo.getTitle());
      cvdl.setString(2, tvo.getDetail());
      cvdl.setInt(3, tvo.getStatusId());
      cvdl.setInt(4, tvo.getPriorityId());
      cvdl.setInt(5, tvo.getRefEntityId());
      cvdl.setInt(6, tvo.getRefIndividualId());
      cvdl.setInt(7, tvo.getManagerId());
      cvdl.setInt(8, tvo.getAssignedToId());
      cvdl.setInt(9, tvo.getOwner());
      cvdl.setInt(10, tvo.getCreatedBy());

      cvdl.executeUpdate();

      ticketId = cvdl.getAutoGeneratedKey();

      Vector thvec = tvo.getThreadVO();
      if (thvec != null) {
        Iterator it = thvec.iterator();
        while (it.hasNext()) {
          ThreadVO thvo = (ThreadVO) it.next();
          addThreadData(userId, ticketId, thvo, cvdl);

        }
      }
      cvdl.destroy();
      cvdl = null;

      // Save CustomFields
      Vector custfieldVec = tvo.getCustomField();
      InitialContext ic = CVUtility.getInitialContext();
      CustomFieldLocalHome custHome = (CustomFieldLocalHome) ic.lookup("local/CustomField");
      CustomFieldLocal custRemote = custHome.create();
      custRemote.setDataSource(this.dataSource);
      for (int i = 0; i < custfieldVec.size(); i++) {
        CustomFieldVO custFieldVO = (CustomFieldVO) custfieldVec.get(i);
        custFieldVO.setRecordID(ticketId);
        custRemote.updateCustomField(custFieldVO);
      }
    } catch (Exception e) {
      logger.error("[duplicateTicket]: Exception", e);
      throw new TicketException(1, "Failed in ticket ejb while updating Ticket");
    } finally {
      if (cvdl != null) {
        cvdl.destroy();
        cvdl = null;
      }

    }
    return ticketId;

  }

  private int addThreadData(int userId, int ticketId, ThreadVO thvo, CVDal cvdl) throws TicketException
  {
    if (thvo == null) {
      throw new TicketException(1, "Could not add thread. Threadvo is empty");
    }
    if (ticketId <= 0) {
      throw new TicketException(1, "Could not add thread. TicketId is not valid");
    }
    boolean validTicketID = this.isValidTicketID(ticketId);
    if (!validTicketID) {
      throw new TicketException(1, "Invalid Ticket ID.");
    }
    if (thvo.getThreadType() == null) {
      thvo.setThreadType(ThreadVO.TT_INTERNAL);
    }
    cvdl.setSql("support.ticket.insertthread");
    cvdl.setInt(1, ticketId);
    cvdl.setString(2, thvo.getTitle());
    cvdl.setString(3, thvo.getDetail());
    cvdl.setString(4, thvo.getThreadType());
    cvdl.setInt(5, thvo.getPriorityId());
    cvdl.setInt(6, userId);
    cvdl.executeUpdate();
    return cvdl.getAutoGeneratedKey();
  }

  private TicketVO getTicketData(int userId, int ticketId, CVDal cvdl)
  {
    cvdl.setSql("support.ticket.getticket");
    cvdl.setInt(1, ticketId);
    Collection col = cvdl.executeQuery();
    if (col == null) {
      return null;
    }
    if (!col.iterator().hasNext()) {
      return null;
    }
    HashMap hm = (HashMap) col.iterator().next();
    TicketVO tvo = new TicketVO();
    tvo.setId(((Long) hm.get("ticketid")).intValue());
    tvo.setTitle((String) hm.get("subject"));
    tvo.setDetail((String) hm.get("Description"));
    tvo.setStatusId(((Long) hm.get("status")).intValue());
    tvo.setStatusName((String) hm.get("statusname"));
    tvo.setPriorityId(((Long) hm.get("priority")).intValue());
    tvo.setPriorityName((String) hm.get("priorityname"));
    tvo.setAssignedToId(((Long) hm.get("assignedto")).intValue());
    tvo.setManagerId(((Long) hm.get("manager")).intValue());
    tvo.setRefEntityId(((Long) hm.get("entityid")).intValue());
    tvo.setRefIndividualId(((Long) hm.get("individualid")).intValue());
    tvo.setOwner(((Long) hm.get("owner")).intValue());
    tvo.setCreatedBy(((Long) hm.get("createdby")).intValue());
    tvo.setModifiedBy(((Long) hm.get("modifiedby")).intValue());
    tvo.setCreatedOn((Timestamp) hm.get("created"));
    tvo.setModifiedOn((Timestamp) hm.get("modified"));
    tvo.setCloseDate((Timestamp) hm.get("dateclosed"));
    tvo.setOCStatus((String) hm.get("ocstatus"));
    return tvo;
  }

  private TicketDBVO getTicketDBData(int userId, int ticketId, CVDal cvdl)
  {
    cvdl.setSql("support.ticket.getticket");
    cvdl.setInt(1, ticketId);
    Collection col = cvdl.executeQuery();
    if (col == null) {
      return null;
    }
    if (!col.iterator().hasNext()) {
      return null;
    }
    HashMap hm = (HashMap) col.iterator().next();
    TicketDBVO tdbvo = new TicketDBVO();
    tdbvo.setId(((Long) hm.get("ticketid")).intValue());
    tdbvo.setTitle((String) hm.get("subject"));
    tdbvo.setDetail((String) hm.get("Description"));
    tdbvo.setStatusId(((Long) hm.get("status")).intValue());
    tdbvo.setStatusName((String) hm.get("statusname"));
    tdbvo.setPriorityId(((Long) hm.get("priority")).intValue());
    tdbvo.setPriorityName((String) hm.get("priorityname"));
    tdbvo.setAssignedToId(((Long) hm.get("assignedto")).intValue());
    tdbvo.setManagerId(((Long) hm.get("manager")).intValue());
    tdbvo.setRefEntityId(((Long) hm.get("entityid")).intValue());
    tdbvo.setRefIndividualId(((Long) hm.get("individualid")).intValue());
    tdbvo.setOwner(((Long) hm.get("owner")).intValue());
    tdbvo.setCreatedBy(((Long) hm.get("createdby")).intValue());
    tdbvo.setModifiedBy(((Long) hm.get("modifiedby")).intValue());
    tdbvo.setCreatedOn((Timestamp) hm.get("created"));
    tdbvo.setModifiedOn((Timestamp) hm.get("modified"));
    tdbvo.setCloseDate((Timestamp) hm.get("dateclosed"));
    tdbvo.setOCStatus((String) hm.get("ocstatus"));
    return tdbvo;
  }

  public void closeTicket(int userId, int ticketId) throws TicketException
  {
    try {
      changeOCStatus(userId, ticketId, TicketVO.TK_OCSTATUS_CLOSE);
    } catch (Exception e) {
      logger.error("[closeTicket]: Exception", e);
      throw new TicketException(TicketException.UPDATE_FAILED, "Could Not close ticket : " + ticketId);
    }
  }

  public void reopenTicket(int userId, int ticketId) throws TicketException
  {
    try {
      changeOCStatus(userId, ticketId, TicketVO.TK_OCSTATUS_OPEN);
    } catch (Exception e) {
      logger.error("[reopenTicket]: Exception", e);
      throw new TicketException(TicketException.UPDATE_FAILED, "Could Not re-open ticket : " + ticketId);
    }
  }

  private void changeOCStatus(int individualId, int ticketId, String ocStatus)
  {
    CVDal cvdl = new CVDal(dataSource);
    try {
      Calendar calendar = DateUtility.getCalendar(individualId, dataSource, true);
      Timestamp ts = new Timestamp(calendar.getTimeInMillis());
      cvdl.setSql("support.ticket.closeticket");
      cvdl.setString(1, ocStatus);
      cvdl.setTimestamp(2, ts);
      if (ocStatus.equals("CLOSE")) {
        cvdl.setInt(3, 2); // stautsID = CLOSED
      } else {
        cvdl.setInt(3, 1); // statusID = OPEN
      }
      cvdl.setInt(4, ticketId);
      cvdl.executeUpdate();
    } finally {
      cvdl.destroy();
    }
  }

  public void addTicketLink(int ticketId, int[] linkId, int linkType)
  {
    if (ticketId > 0 && linkId.length > 0) {
      CVDal dl = new CVDal(dataSource);
      try {
        dl.setSql("support.ticket.addlink");
        for (int i = 0; i < linkId.length; i++) {
          dl.setInt(1, ticketId);
          dl.setInt(2, linkType);
          dl.setInt(3, linkId[i]);
          dl.executeUpdate();
          dl.clearParameters();
        }
      } finally {
        dl.destroy();
      }
    }
  }

  /**
   * @author Kevin McAllister <kevin@centraview.com> This simply sets the target
   *         datasource to be used for DB interaction
   * @param ds A string that contains the cannonical JNDI name of the datasource
   */
  public void setDataSource(String ds)
  {
    this.dataSource = ds;
  }

  /**
   * This method check wheather the TicketID is Existing in ticket table or not.
   * @param ticketId A int that contains ticket Identification number
   */
  private boolean isValidTicketID(int ticketId)
  {
    boolean validTicketID = false;
    CVDal cvdl = new CVDal(dataSource);
    try {
      cvdl.setSqlQuery("SELECT TicketID FROM ticket where TicketID=" + ticketId);
      Collection col = cvdl.executeQuery();
      Iterator it = col.iterator();
      if (col != null) {
        if (it.hasNext()) {
          validTicketID = true;
        }
      }
    } catch (Exception e) {
      logger.error("[isValidTicketID]: Exception", e);
    } finally {
      cvdl.destroy();
    }
    return validTicketID;
  }

  /**
   * This method returns Ticket Name Of the Ticket
   * @param TicketID The TicketID to collect the Ticket Title
   * @return TicketName The TicketName
   */
  public String getTicketName(int TicketID)
  {
    String TicketName = "";
    CVDal dl = new CVDal(dataSource);
    try {
      String TicketQuery = "select ticketid, subject  from ticket where ticketid = ?";
      dl.setSqlQuery(TicketQuery);
      dl.setInt(1, TicketID);
      Collection col = dl.executeQuery();
      if (col != null) {
        Iterator it = col.iterator();
        while (it.hasNext()) {
          HashMap hm = (HashMap) it.next();
          TicketName = (String) hm.get("subject");
        }
      }
    } catch (Exception e) {
      logger.error("[getTicketName]: Exception", e);
    } finally {
      dl.destroy();
    }
    return TicketName;
  }
}
